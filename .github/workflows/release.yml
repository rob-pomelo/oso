name: Create Release
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main

jobs:
  version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/check_version
      - name: Set version env
        run: echo "oso_version=$(cat VERSION)" >> $GITHUB_ENV
      - name: Check github ref matches
        if: startsWith(github.ref, 'refs/tags/')
        env:
          github_ref: ${{ github.ref }}
        run: grep "${github_ref/refs\/tags\/v/}" VERSION

  linux_libs:
    name: Build release libraries on Linux
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build release libraries
        run: |
          rustup target add aarch64-unknown-linux-gnu
          cargo build --release -p polar-c-api
          cargo build --target aarch64-unknown-linux-gnu --release -p polar-c-api
      - name: Rename static lib
        run: mv target/release/libpolar.a target/libpolar-${{runner.os}}.a
      - name: Rename static ARM lib
        run: mv target/aarch64-unknown-linux-gnu/release/libpolar.a target/libpolar-${{runner.os}}-arm.a
      - name: Rename dynamic lib
        run: mv target/release/libpolar.so target/libpolar-${{runner.os}}.so
      - name: Rename dynamic ARM lib
        run: mv target/aarch64-unknown-linux-gnu/release/libpolar.so target/libpolar-${{runner.os}}-arm.so
      - name: Merge static libs into fat static lib
        run: lipo -create target/libpolar-${{runner.os}}.a target/libpolar-${{runner.os}}-arm.a -output target/libpolar-linux-fat.a
      - name: Merge dynamic libs into fat dynamic lib
        run: lipo -create target/libpolar-${{runner.os}}-arm.so target/libpolar-${{runner.os}}-arm.so -output target/libpolar-linux-fat.so
      - uses: actions/upload-artifact@v2
        with:
          name: oso_library
          path: |
            target/libpolar-${{runner.os}}.so
            target/libpolar-${{runner.os}}-arm.so
            target/libpolar-linux-fat.so
      - uses: actions/upload-artifact@v2
        with:
          name: oso_library
          path: polar-c-api/polar.h
      - uses: actions/upload-artifact@v2
        with:
          name: oso_static_library
          path: |
            target/libpolar-linux-fat.a
            target/libpolar-${{runner.os}}.a
            target/libpolar-${{runner.os}}-arm.a
      - uses: actions/upload-artifact@v2
        with:
          name: oso_static_library
          path: polar-c-api/polar.h

  macos_libs:
    name: Build release libraries on MacOS
    runs-on: macos-11
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build release library
        run: cargo build --release -p polar-c-api
      - name: Build release arm library
        run: |
          rustup target add aarch64-apple-darwin
          SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path) \
            MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version) \
            cargo build --target aarch64-apple-darwin --release -p polar-c-api
      - name: Rename static lib
        run: mv target/release/libpolar.a target/libpolar-macOS.a
      - name: Rename static ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.a target/libpolar-macOS-arm.a
      - name: Rename dynamic lib
        run: mv target/release/libpolar.dylib target/libpolar-macOS.dylib
      - name: Rename dynamic ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.dylib target/libpolar-macOS-arm.dylib
      - name: Merge dynamic libs into fat dynamic lib
        run: lipo -create target/libpolar-macOS.dylib target/libpolar-macOS-arm.dylib -output target/libpolar-macOS-fat.dylib
      - name: Merge static libs into fat static lib
        run: lipo -create target/libpolar-macOS.a target/libpolar-macOS-arm.a -output target/libpolar-macOS-fat.a
      - uses: actions/upload-artifact@v2
        with:
          name: oso_library
          path: |
            target/libpolar-macOS-fat.dylib
            target/libpolar-macOS.dylib
            target/libpolar-macOS-arm.dylib
      - uses: actions/upload-artifact@v2
        with:
          name: oso_static_library
          if-no-files-found: error
          path: |
            target/libpolar-macOS-fat.a
            target/libpolar-macOS.a
            target/libpolar-macOS-arm.a
      - uses: actions/upload-artifact@v2
        with:
          name: oso_static_library
          path: polar-c-api/polar.h
          if-no-files-found: error

  build_jar:
    name: Build jar.
    runs-on: ubuntu-latest
    needs: [linux_libs, macos_libs]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - uses: actions/setup-java@v1
        with:
          java-version: "10"
      - name: Download dylibs
        uses: actions/download-artifact@v1
        with:
          name: oso_library
      - name: Copy libraries into resources.
        run: |
          mkdir -p languages/java/oso/src/main/resources/linux
          cp -r target/libpolar-linux-fat.so languages/java/oso/src/main/resources/linux/
          mkdir -p languages/java/oso/src/main/resources/macos
          cp -r oso_library/libpolar-macOS-fat.dylib languages/java/oso/src/main/resources/macos/libpolar.dylib
      - name: Test
        run: |
          mvn -q test
        working-directory: languages/java/oso
      - name: Build
        run: |
          mvn -q package
        working-directory: languages/java/oso
      - uses: actions/upload-artifact@v2
        with:
          name: jar
          path: languages/java/oso/target/oso-${{ steps.version.outputs.oso_version }}.jar

  validate_java:
    name: Test java ${{ matrix.java-version }} on ${{ matrix.os }}
    needs: [build_jar]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11]
        java-version: [11]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Download oso jar from package run
        uses: actions/download-artifact@v1
        with:
          name: jar
      - name: Run tests
        run: |
          javac -cp "../jar/oso-${{ steps.version.outputs.oso_version }}.jar:." Test.java
          java -cp "../jar/oso-${{ steps.version.outputs.oso_version }}.jar:." Test
        working-directory: test

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      [
        build_jar,
        validate_java,
      ]
    steps:
      - name: Set version env
        id: version
        env:
          github_ref: ${{ github.ref }}
        run: echo "::set-output name=oso_version::${github_ref/refs\/tags\/v/}"
      - name: Download oso dylibs
        uses: actions/download-artifact@v1
        with:
          name: oso_library
      - name: Zip libraries
        run: zip --junk-paths -r oso-lib.zip oso_library/
      - name: Download oso jar from package run
        uses: actions/download-artifact@v1
        with:
          name: jar
      - name: Zip Java JAR
        run: zip --junk-paths -r oso-java.zip jar/
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.oso_version }}
          release_name: oso ${{ steps.version.outputs.oso_version }}
          body: |
            oso ${{ steps.version.outputs.oso_version }}
          draft: false
          prerelease: true
      - name: Upload Libraries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./oso-lib.zip
          asset_name: oso-lib-${{ steps.version.outputs.oso_version }}.zip
          asset_content_type: application/zip
      - name: Upload Java Jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./oso-java.zip
          asset_name: oso-java-${{ steps.version.outputs.oso_version }}.zip
          asset_content_type: application/zip
